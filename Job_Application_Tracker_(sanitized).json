{
  "name": "Job Application Tracker (2WF) SANITIZED",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst updatedItems = items.map((item) => {\n  const htmlContent = item?.json?.body?.content;\n  const textContent = htmlContent.replace(/<[^>]*>?/gm, \"\");\n  item.json.body.content = textContent;\n  return item;\n});\n\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        -256
      ],
      "id": "NODE_01",
      "name": "Code"
    },
    {
      "parameters": {
        "resource": "table",
        "operation": "getRows",
        "workbook": {
          "__rl": true,
          "value": "REDACTED_WORKBOOK_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "worksheet": {
          "__rl": true,
          "value": "REDACTED_WORKSHEET_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "table": {
          "__rl": true,
          "value": "REDACTED_TABLE_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "limit": 230,
        "filters": {}
      },
      "type": "n8n-nodes-base.microsoftExcel",
      "typeVersion": 2.1,
      "position": [
        1248,
        -256
      ],
      "id": "NODE_02",
      "name": "Get rows",
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Extract the following fields from this email:\n- Job title\n- Company\n- Application status (Rejected, Progressed, Pending)\n\nReturn only valid JSON like:\n{\n  \"jobTitle\": \"...\",\n  \"company\": \"...\",\n  \"status\": \"...\"\n}\n\nbased on the subject  {{ $json.subject }}\n\nand content {{ $json.body.content }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        672,
        -256
      ],
      "id": "NODE_03",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are given a list of job applications in JSON format (each with jobTitle, company, rowId).\nYou are also given a target jobTitle and company.\n\nFind the ONE row that best matches the target (allow fuzzy matching: case/punctuation/minor wording).\nReturn only valid JSON:\n{ \"rowId\": \"...\" }\n\nExcel rows:\n{{ JSON.stringify($json.excelRows) }}\n\nTarget:\nJobTitle = {{ $json.targetJobTitle }}, Company = {{ $json.targetCompany }}\n"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2144,
        -256
      ],
      "id": "NODE_04",
      "name": "Message a model2",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "openAiApi": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Build the full Excel rows list once\nconst excelRows = $items(\"Get rows\", 0, 0).map(it => ({\n  rowId: it.json.ID ?? it.json.id,\n  jobTitle: (it.json[\"Job Title\"] || \"\").toString().trim(),\n  company: (it.json[\"Company\"] || \"\").toString().trim(),\n}));\n\n// For *each* email from Edit Fields, emit one item with its own target\nconst targets = $items(\"Format\").map(t => ({\n  json: {\n    excelRows,\n    targetJobTitle: (t.json[\"Job Title\"] || \"\").toString().trim(),\n    targetCompany: (t.json[\"Company\"] || \"\").toString().trim(),\n    targetStatus: (t.json[\"Status\"] || \"\").toString().trim(),\n  }\n}));\n\nreturn targets;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1472,
        -256
      ],
      "id": "NODE_05",
      "name": "Give / Match row ID of EXCEL file"
    },
    {
      "parameters": {
        "content": "Add IDs to rows",
        "height": 432,
        "width": 416
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1216,
        -416
      ],
      "typeVersion": 1,
      "id": "NODE_06",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "resource": "worksheet",
        "operation": "update",
        "workbook": {
          "__rl": true,
          "value": "REDACTED_WORKBOOK_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "worksheet": {
          "__rl": true,
          "value": "REDACTED_WORKSHEET_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "columnToMatchOn": "ID",
        "valueToMatchOn": "={{ $json.ID }}",
        "fieldsUi": {
          "values": [
            {
              "column": "Company",
              "fieldValue": "={{ $json.Company }}"
            },
            {
              "column": "Job Title",
              "fieldValue": "={{ $json['Job Title'] }}"
            },
            {
              "column": "Status",
              "fieldValue": "={{ $json.Status }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftExcel",
      "typeVersion": 2.1,
      "position": [
        2720,
        -256
      ],
      "id": "NODE_07",
      "name": "Update sheet",
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Fan OUT based on the model results (one per email)\nconst allRows = $items(\"Get rows\", 0, 0).map(i => i.json);\nconst messages = $items(\"Message a model2\");   // should be 7 if the first code node is fixed\nconst edits    = $items(\"Format\");        // aligns index-wise with messages\n\nreturn messages.map((m, idx) => {\n  const rowId = m?.json?.message?.content?.rowId ?? null;\n  const newStatus = (edits[idx]?.json?.Status || \"\").toString();\n\n  const current = allRows.find(r => String(r.ID) === String(rowId)) || {};\n\n  return {\n    json: {\n      ID: current.ID ?? rowId,\n      \"Job Title\": String(current[\"Job Title\"] ?? \"\"),\n      \"Company\":  String(current[\"Company\"] ?? \"\"),\n      \"Status\":   newStatus,\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2496,
        -256
      ],
      "id": "NODE_08",
      "name": "Fan out"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        448,
        -256
      ],
      "id": "NODE_09",
      "name": "Merge"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8015b77f-e653-4129-9186-d1d7a7cfff4b",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "Unfortunately",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "7ade51d0-bedb-41ac-bdcc-743cc28193c4",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "moved forward",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "81f3e9db-3c0a-44f6-924d-ab96686ed70d",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "best of luck",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "658f8415-abda-40cb-8ae0-383063d6ec05",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "other candidates",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "b7bf5ac8-4f6d-457a-ac8b-ea1bcf7e50b8",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "not to move forward",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "5814393e-ee4e-4e3b-8163-61fdfca894fa",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "we have decided to move forward with another",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "9006937f-fc5c-40bf-8bcd-010654c8c730",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "we gaan niet door",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "2577a0df-6300-4811-a38c-a04b726ef522",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "helaas ",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "5636d515-40d8-4189-9814-ed13c0156c6c",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "andere kandidaten",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "2048fd95-9f9b-4bae-8fe6-500d1459a8bd",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "niet uitnodigen",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": false
        }
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        224,
        -160
      ],
      "id": "NODE_10",
      "name": "Bad news"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8015b77f-e653-4129-9186-d1d7a7cfff4b",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "we would like to invite you",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "7f3bf93f-1849-4bd3-b793-a2c260a65e8d",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "successfully selected",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "60614836-83d9-41ed-a47a-d8bfb8bba786",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "uitnodiging gesprek",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "f7bba669-275b-4974-ad01-92bf59e89937",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "uitnodigen voor gesprek",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "9f8a930b-895b-42c8-bc00-a2e311669fb9",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "schedule a call",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "4709a930-e88d-49a0-8ebb-30997ec1e9e7",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "we nodigen je uit",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "af2adaaa-a52d-42a6-94f8-91d1dc830d71",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "kennismakingsgesprek",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "02b9b057-dac7-4b95-a169-57134b455088",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "we would like to meet",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "9bb7dfc8-b7d4-4b6b-87c7-2dea11254311",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "really excited",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": false
        }
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        224,
        -352
      ],
      "id": "NODE_11",
      "name": "Good news"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1696,
        -256
      ],
      "id": "NODE_12",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "amount": 12
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1920,
        -256
      ],
      "id": "NODE_13",
      "name": "Wait",
      "webhookId": "REDACTED"
    },
    {
      "parameters": {
        "resource": "folderMessage",
        "folderId": {
          "__rl": true,
          "value": "REDACTED_FOLDER_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "limit": 200,
        "output": "fields",
        "fields": [
          "body",
          "subject"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -224,
        -256
      ],
      "id": "NODE_14",
      "name": "Get Junk Mail Messages",
      "webhookId": "REDACTED",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Instructions:\nYou have access to email folders (check both Postvak IN AND Ongewenste e-mail), check if they have any job application confirmation emails. ONLY check for emails received today{{ $now }} . Do not check for job application rejections, job interviews, newsletters, or other unrelated email. When there are no jo application confirmation emails, stop the process.\n\nWhen there are job confirmation e-mails, extract the following:\nDate (Date of the received email)\nCompany (Name of the company)\nJob Title \n\nGet the columns of the excel. EXport in JSON the rows in the order of the columns. Next, add Pending to the Status Column of that row. Also add a new ID value, which is one digit higher than the previous row.\n\n----------------\n\nTips for identification (not hard rules)\n\nUse these as helpful patterns, not strict rules. If the email clearly looks like a confirmation even if it doesn’t match exactly, treat it as one.\n\nPositive signals (confirmation):\n\nEN: “thank you for applying”, “application received”, “we’ve received your application”, “application confirmation”, “your application to …”, etc.\n\nNL: “bedankt voor je/jouw/uw sollicitatie”, “(uw) sollicitatie is ontvangen”, “bevestiging van je/uw sollicitatie”, “we hebben je sollicitatie ontvangen”, etc.\n\nZH: “感谢您的申请”, “我们已收到您的申请”, “申请已收到”, “申请确认”, “感谢应聘”, etc.\n\nSome Applicant Tracking Systems often send confirmations: Workday, Greenhouse, Lever, SmartRecruiters, SuccessFactors, Taleo, Personio, Recruitee, Workable, Jobvite, BambooHR\n\nNegative signals (ignore):\n\nRejections: “unfortunately”, “helaas”, “很遗憾”\n\nInterviews: “interview”, “sollicitatiegesprek”, “面试/邀约”\n\nNewsletters / marketing / unrelated.\n\nExtraction tips:\n\nPrefer header Date for Date.\n\nCompany + Job Title usually appear together:\n\nEN: “Your application to {Company} for {Job Title} has been received.”\n\nNL: “Dank je wel voor je sollicitatie bij {Company} voor {Job Title}.”\n\nZH: “我们已收到您申请 {Company} 的 {Job Title} 职位。”\n\n\n-----------------------\n",
        "options": {
          "systemMessage": "=You are a helpful assistant that monitors for job application confirmations and adds rows to excel tables. don't ask questions back. You just execute my orders. Today is {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1056,
        176
      ],
      "id": "NODE_15",
      "name": "AI Agent",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        800,
        400
      ],
      "id": "NODE_16",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 23
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -448,
        176
      ],
      "id": "NODE_17",
      "name": "Schedule Daily"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "daysInterval": 5
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -448,
        -256
      ],
      "id": "NODE_18",
      "name": "Schedule 5 Days"
    },
    {
      "parameters": {
        "resource": "table",
        "operation": "getRows",
        "workbook": {
          "__rl": true,
          "value": "REDACTED_WORKBOOK_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "worksheet": {
          "__rl": true,
          "value": "REDACTED_WORKSHEET_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "table": {
          "__rl": true,
          "value": "REDACTED_TABLE_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "returnAll": true,
        "filters": {}
      },
      "type": "n8n-nodes-base.microsoftExcelTool",
      "typeVersion": 2.1,
      "position": [
        1056,
        400
      ],
      "id": "NODE_19",
      "name": "Get rows table in Microsoft Excel",
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 30,
        "output": "fields",
        "fields": [
          "body",
          "subject",
          "receivedDateTime",
          "from",
          "sender"
        ],
        "filtersUI": {
          "values": {
            "filters": {
              "receivedAfter": "={{ $today.startOf('day') }}\n"
            }
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlookTool",
      "typeVersion": 2,
      "position": [
        1184,
        400
      ],
      "id": "NODE_20",
      "name": "Get many folder messages in Junk",
      "webhookId": "REDACTED",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=9"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        928,
        400
      ],
      "id": "NODE_21",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        352,
        176
      ],
      "id": "NODE_22",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "9"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -160,
        400
      ],
      "id": "NODE_23",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 30,
        "output": "fields",
        "fields": [
          "body",
          "from",
          "sender",
          "subject",
          "receivedDateTime"
        ],
        "filtersUI": {
          "values": {
            "filters": {
              "receivedAfter": "={{ $today.startOf('day') }}\n"
            }
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlookTool",
      "typeVersion": 2,
      "position": [
        1312,
        400
      ],
      "id": "NODE_24",
      "name": "Get many messages in Microsoft Outlook",
      "webhookId": "REDACTED",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "resource": "table",
        "operation": "getColumns",
        "workbook": {
          "__rl": true,
          "value": "REDACTED_WORKBOOK_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "worksheet": {
          "__rl": true,
          "value": "REDACTED_WORKSHEET_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "table": {
          "__rl": true,
          "value": "REDACTED_TABLE_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "returnAll": true
      },
      "type": "n8n-nodes-base.microsoftExcelTool",
      "typeVersion": 2.1,
      "position": [
        1440,
        400
      ],
      "id": "NODE_25",
      "name": "Get Columns",
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const text = $json.output;\n\n// Extract the JSON array between the [ and ]\nconst match = text.match(/\\[\\s*{[\\s\\S]*}\\s*\\]/);\n\nlet rows = [];\nif (match) {\n  rows = JSON.parse(match[0]); // parse the rows\n}\n\nreturn [\n  {\n    textOnly: text.replace(match[0], \"\").trim(),\n    rows: rows\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1648,
        176
      ],
      "id": "NODE_26",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "return $json.rows.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1872,
        176
      ],
      "id": "NODE_27",
      "name": "Code2"
    },
    {
      "parameters": {
        "resource": "table",
        "workbook": {
          "__rl": true,
          "value": "REDACTED_WORKBOOK_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "worksheet": {
          "__rl": true,
          "value": "REDACTED_WORKSHEET_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "table": {
          "__rl": true,
          "value": "REDACTED_TABLE_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "dataMode": "autoMap",
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftExcel",
      "typeVersion": 2.1,
      "position": [
        2096,
        176
      ],
      "id": "NODE_28",
      "name": "Append rows to table",
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "content": "Clear Memory\n",
        "height": 192,
        "width": 288
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -272,
        144
      ],
      "id": "NODE_29",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "Fields feed into AGENT AI",
        "height": 208,
        "width": 720
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        48,
        128
      ],
      "id": "NODE_30",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "EMAIL SPOTTER AND PARSER",
        "height": 224,
        "width": 384
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        976,
        112
      ],
      "id": "NODE_31",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "REFORMAT & add to table",
        "height": 240,
        "width": 688
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1584,
        96
      ],
      "id": "NODE_32",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "mode": "delete",
        "deleteMode": "all"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -224,
        176
      ],
      "id": "NODE_33",
      "name": "Chat Memory Manager"
    },
    {
      "parameters": {
        "content": "Define Good and Bad news!",
        "height": 432,
        "width": 496
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        128,
        -416
      ],
      "id": "NODE_34",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "Define Good and Bad news!",
        "height": 432,
        "width": 512
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        640,
        -416
      ],
      "id": "NODE_35",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "Get junk mail",
        "height": 432,
        "width": 288
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -320,
        -416
      ],
      "id": "NODE_36",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "Have AI find the best match, not relying on IDs#",
        "height": 272,
        "width": 528
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2112,
        -352
      ],
      "typeVersion": 1,
      "id": "NODE_37",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "188380c8-00c1-4aba-8924-13e852a8c5cc",
              "name": "Job Title",
              "value": "={{ $json.message.content.jobTitle }}",
              "type": "string"
            },
            {
              "id": "e80d3263-cc50-4bab-90bb-f43db77eeb7f",
              "name": "Company",
              "value": "={{ $json.message.content.company }}",
              "type": "string"
            },
            {
              "id": "32f228de-2ab2-43f6-9ad2-5a12dd66b202",
              "name": "Status",
              "value": "={{ $json.message.content.status }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1024,
        -256
      ],
      "id": "NODE_38",
      "name": "Format"
    },
    {
      "parameters": {
        "resource": "table",
        "operation": "getRows",
        "workbook": {
          "__rl": true,
          "value": "REDACTED_WORKBOOK_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "worksheet": {
          "__rl": true,
          "value": "REDACTED_WORKSHEET_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "table": {
          "__rl": true,
          "value": "REDACTED_TABLE_ID",
          "mode": "list",
          "cachedResultName": "REDACTED_NAME",
          "cachedResultUrl": "REDACTED_URL"
        },
        "returnAll": true,
        "filters": {}
      },
      "type": "n8n-nodes-base.microsoftExcel",
      "typeVersion": 2.1,
      "position": [
        128,
        176
      ],
      "id": "NODE_39",
      "name": "Get rows2",
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "REDACTED",
          "name": "REDACTED"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        576,
        176
      ],
      "id": "NODE_40",
      "name": "Format1"
    }
  ],
  "pinData": {
    "Schedule Daily": [
      {
        "json": {
          "timestamp": "2025-08-23T23:52:59.445+02:00",
          "Readable date": "August 23rd 2025, 11:52:59 pm",
          "Readable time": "11:52:59 pm",
          "Day of week": "Saturday",
          "Year": "2025",
          "Month": "August",
          "Day of month": "23",
          "Hour": "23",
          "Minute": "52",
          "Second": "59",
          "Timezone": "Europe/Amsterdam (UTC+02:00)"
        }
      }
    ]
  },
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Bad news",
            "type": "main",
            "index": 0
          },
          {
            "node": "Good news",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get rows": {
      "main": [
        [
          {
            "node": "Give / Match row ID of EXCEL file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model2": {
      "main": [
        [
          {
            "node": "Fan out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Give / Match row ID of EXCEL file": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fan out": {
      "main": [
        [
          {
            "node": "Update sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bad news": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Good news": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Message a model2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Junk Mail Messages": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Daily": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule 5 Days": {
      "main": [
        [
          {
            "node": "Get Junk Mail Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get rows table in Microsoft Excel": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get many folder messages in Junk": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update sheet": {
      "main": [
        []
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Format1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get many messages in Microsoft Outlook": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Columns": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Append rows to table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory Manager": {
      "main": [
        [
          {
            "node": "Get rows2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format": {
      "main": [
        [
          {
            "node": "Get rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get rows2": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "REDACTED_VERSION_ID",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "REDACTED"
  },
  "id": "REDACTED_WORKFLOW_ID",
  "tags": []
}